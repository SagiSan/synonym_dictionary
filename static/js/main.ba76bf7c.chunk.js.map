{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","addWord","words","state","synonyms_list","word","name","synonyms","i","length","push","setState","updateSynonyms","synonym","onChangeWord","e","target","value","search","search_results","searchRecursion","splice","results","indexOf","this","map","syn","key","search_synonyms","className","type","placeholder","onChange","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba76bf7c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: '',\n      synonym: '',\n      synonyms_list: [],\n      words: {},\n      search: '',\n      search_results: []\n    }\n  }\n  addWord = () => {\n    let words = { ...this.state.words };\n    let synonyms_list = [...this.state.synonyms_list];\n\n    if (!words[this.state.word]) {\n      words[this.state.word] = {\n        name: this.state.word,\n      };\n    }\n    words[this.state.word].synonyms = [...synonyms_list];\n\n\n    for (let i = 0; i < synonyms_list.length; i++) {\n      if (!words[synonyms_list[i]]) {\n        words[synonyms_list[i]] = {\n          name: synonyms_list[i],\n          synonyms: [this.state.word]\n        }\n      } else {\n        words[synonyms_list[i]].synonyms.push(this.state.word);\n      }\n    }\n    this.setState({ words, synonyms_list: [], word: '' });\n  }\n  updateSynonyms = () => {\n    this.setState({ synonyms_list: [...this.state.synonyms_list, this.state.synonym], synonym: '' });\n\n  }\n  onChangeWord = e => {\n\n    if (this.state.words[e.target.value]) {\n      this.setState({ synonyms_list: [...this.state.words[e.target.value].synonyms] })\n    } else {\n      this.setState({ synonyms_list: [] });\n    }\n    this.setState({ word: e.target.value });\n  }\n  search = (e) => {\n    let value = e.target.value;\n    let synonyms = [];\n    this.setState({ search: value, search_results: [] });\n    if (this.state.words[value]) {\n      let search_results = this.searchRecursion(value, synonyms);\n      search_results.splice(0, 1);\n      this.setState({ search_results });\n    }\n  }\n  searchRecursion = (value, results) => {\n    if (results.indexOf(value) > -1) {\n      return results;\n    }\n    results.push(value);\n    for (let i = 0; i < this.state.words[value].synonyms.length; i++) {\n      this.searchRecursion(this.state.words[value].synonyms[i], results);\n    }\n    return results;\n  }\n  render() {\n    const { word, synonym, synonyms_list, search, search_results } = this.state;\n    const synonyms = <ul>\n      {synonyms_list.length > 0 && synonyms_list.map(syn => {\n        return (\n          <li key={syn}>{syn}</li>\n        )\n      })}\n    </ul>;\n    const search_synonyms = <ul>\n      {search_results.length > 0 && search_results.map((syn, i) => {\n        return (\n          <li key={`${syn}_${i}`}>{syn}</li>\n        )\n      })}\n    </ul>;\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Synonym Dictionary</h1>\n        </header>\n        <main>\n          <input type='text' placeholder=\"Enter your word\" value={word} onChange={this.onChangeWord} />\n          <br />\n          {synonyms_list.length > 0 && synonyms}\n          <br />\n          {word.length > 0 && <input type='text' placeholder=\"Add synonym\" value={synonym} onChange={e => this.setState({ synonym: e.target.value })} />}\n          {word.length > 0 && <button disabled={!synonyms_list.indexOf(synonym) || synonym === word || synonym === \"\"} onClick={this.updateSynonyms}>Add</button>}\n          <br />\n          <br />\n          {word.length > 0 && synonyms_list.length > 0 && <button onClick={this.addWord}>Save word</button>}\n        </main>\n        <section className='search'>\n          <hr />\n          <h2>Search words</h2>\n          <input type='text' placeholder=\"Search\" value={search} onChange={this.search} />\n          <br />\n          {search_synonyms}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}