{"version":3,"sources":["Search.js","Words.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","search","onSearch","search_synonyms","className","type","placeholder","value","onChange","Words","word","onChangeWord","onChangeSynonym","synonyms_list","synonyms","synonym","updateSynonyms","addWord","length","style","marginLeft","disabled","indexOf","onClick","App","words","state","name","i","push","setState","alert","e","target","search_results","searchRecursion","splice","results","this","map","syn","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4178b662.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Search(props) {\r\n    const { search, onSearch, search_synonyms } = props;\r\n    return (\r\n        <section className='search'>\r\n            <hr />\r\n            <h2>Search words</h2>\r\n            <input type='text' placeholder=\"Search\" value={search} onChange={onSearch} />\r\n            <br />\r\n            {search_synonyms}\r\n        </section>\r\n    )\r\n}\r\nexport default Search;","import React from 'react';\r\n\r\nfunction Words(props) {\r\n    const {\r\n        word,\r\n        onChangeWord,\r\n        onChangeSynonym,\r\n        synonyms_list,\r\n        synonyms,\r\n        synonym,\r\n        updateSynonyms,\r\n        addWord\r\n    } = props;\r\n    return (\r\n        <main>\r\n            <input type='text' placeholder=\"Enter your word\" value={word} onChange={onChangeWord} />\r\n            <br />\r\n            {synonyms_list.length > 0 && synonyms}\r\n            <br />\r\n            {word.length > 0 &&\r\n                <input\r\n                    type='text'\r\n                    placeholder=\"Add synonym\"\r\n                    value={synonym}\r\n                    onChange={onChangeSynonym}\r\n                />}\r\n            {word.length > 0 &&\r\n                <button\r\n                    style={{ marginLeft: '1em' }}\r\n                    disabled={!synonyms_list.indexOf(synonym) || synonym === word || synonym === \"\"}\r\n                    onClick={updateSynonyms}>Add\r\n                </button>}\r\n            <br />\r\n            <br />\r\n            {word.length > 0 && synonyms_list.length > 0 && <button onClick={addWord}>Save word</button>}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Words;","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './Search';\nimport Words from './Words';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: '',\n      synonym: '',\n      synonyms_list: [],\n      words: {},\n      search: '',\n      search_results: []\n    }\n  }\n  addWord = () => {\n    let words = { ...this.state.words };\n    let synonyms_list = [...this.state.synonyms_list];\n\n    if (!words[this.state.word]) {\n      words[this.state.word] = {\n        name: this.state.word,\n      };\n    }\n    words[this.state.word].synonyms = [...synonyms_list];\n\n\n    for (let i = 0; i < synonyms_list.length; i++) {\n      if (!words[synonyms_list[i]]) {\n        words[synonyms_list[i]] = {\n          name: synonyms_list[i],\n          synonyms: [this.state.word]\n        }\n      } else {\n        words[synonyms_list[i]].synonyms.push(this.state.word);\n      }\n    }\n    this.setState({ words, synonyms_list: [], word: '' }, () => {\n      alert('Word added. Try searching for it or its synonyms');\n    });\n  }\n  updateSynonyms = () => {\n    this.setState({ synonyms_list: [...this.state.synonyms_list, this.state.synonym], synonym: '' });\n\n  }\n  onChangeSynonym = e => {\n    this.setState({ synonym: e.target.value });\n  }\n  onChangeWord = e => {\n\n    if (this.state.words[e.target.value]) {\n      this.setState({ synonyms_list: [...this.state.words[e.target.value].synonyms] })\n    } else {\n      this.setState({ synonyms_list: [] });\n    }\n    this.setState({ word: e.target.value });\n  }\n  onSearch = (e) => {\n    let value = e.target.value;\n    let synonyms = [];\n    this.setState({ search: value, search_results: [] });\n    if (this.state.words[value]) {\n      let search_results = this.searchRecursion(value, synonyms);\n      search_results.splice(0, 1);\n      this.setState({ search_results });\n    }\n  }\n  searchRecursion = (value, results) => {\n    if (results.indexOf(value) > -1) {\n      return results;\n    }\n    results.push(value);\n    for (let i = 0; i < this.state.words[value].synonyms.length; i++) {\n      this.searchRecursion(this.state.words[value].synonyms[i], results);\n    }\n    return results;\n  }\n  render() {\n    const { word, synonym, synonyms_list, search, search_results } = this.state;\n    const synonyms = <ul>\n      {synonyms_list.length > 0 && synonyms_list.map(syn => {\n        return (\n          <li key={syn}>{syn}</li>\n        )\n      })}\n    </ul>;\n    const search_synonyms = <ul>\n      {search_results.length > 0 && search_results.map((syn, i) => {\n        return (\n          <li key={`${syn}_${i}`}>{syn}</li>\n        )\n      })}\n    </ul>;\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Synonym Dictionary</h1>\n        </header>\n        <Words\n          word={word}\n          onChangeWord={this.onChangeWord}\n          onChangeSynonym={this.onChangeSynonym}\n          synonyms_list={synonyms_list}\n          synonyms={synonyms}\n          synonym={synonym}\n          updateSynonyms={this.updateSynonyms}\n          addWord={this.addWord}\n        />\n        <Search\n          search={search}\n          onSearch={this.onSearch}\n          search_synonyms={search_synonyms}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}